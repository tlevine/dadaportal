Dada Portal
===========
Door to the dada

There were several things that I wanted to do with static websites but
couldn't. Here I finally take the plunge and add them dynamically.

Installation
--------------
Check it out.

    git clone nsa:/lockers/tlevine_vol/jail/small.dada.pink/dadaportal/.git

Install dependencies and set up the server. Unfortunately, this is documented
only [`templates/install.md'](templates/install.md), which can only be rendered
after you have installed dependencies.

Turn it on.

    ./manage.py runserver

Follow [these directions](http://localhost:8000/docs/) to install on the server.

Dada sources
--------------
Dada are acquired from files, cached in the database through the Django
ORM, and searched with haystack. This is the case for the following
categories of dada.

* Articles, which start as a directory of files
* Mail, which start as directories of email files within a maildir
* Schedule, which starts as pal calendar files (not supported yet)

When run in development mode, the Dada Portal ignores the database cache;
this facilitates quick debugging iteration cycles.

Articles are stored in ordinary files with a YAML header and other
body, as I did when I used Nanoc.
Maybe things can be categorized and otherwise related.

I expose my public emails with an adapted version of ejnug. My "home"
computer gets the emails over imap and then sends the contents of the
"Public" mailboxes to my "nsa" computer over rsync.

Usage
-----------
Edit things in the article directory (``canonical-articles``), the mail
directory, or the schedule directory. Update the cache for your local
computer like so. ::

    ./manage.py cache

Index them for the search engine like this. ::

    ./manage.py index

Deploy stuff from your laptop to the server. ::

    ./manage.py deploy

Other stuff. ::

    ./manage.py makemigrations
    ./manage.py migrate
    ./manage.py syncdb
    ./manage.py collectstatic

Tracking
--------------------
I do my own tracking so I don't need to use Piwik and so I don't have
to match different logs after the fact.

More about articles
------------------------
Source code for the articles is easy to display.
``/source`` is a directory listing of
the top level of the repository, and directories recursively list their
contents.

The following markup languages for articles are supported.

* Restructured Text
* Markdown
* Hypertext Markup Language

Public and semi-public articles are a git submodule.

Articles are automatically converted into
`big <https://github.com/tmcw/big>`_ presentations.

Homepage displays the most popular articles, maybe grouped in some
interesting way, or maybe not if that's easier.

Management commands for installing and deploying
----------------------------------------------------
There's a management command for installing. It handles the following,
either by generating and copying configuration files or by telling you
to install, configure, &c. a particular thing.

* Create a user on the web server (nsa).
* Install a crontab to send public emails from the email server (home)
    to nsa.
* Set up the database on nsa.
* Install, configure and enable the Apache site on nsa.
* Install dependencies on nsa

  * Python libraries
  * pal

There's also a management command for deploying. It does the following,
using rsync for all file transfers.

* Run tests.
* Copy canonical articles to nsa.
* Cache and index the articles on nsa.
* Copy ``pal.conf`` and pal calendar files to nsa.
* Generate static files on nsa.

Not features
----------------
I don't do forms in here; I run LimeSurvey and put forms there.

People can't edit my site wiki-style as they could with Branchable.
But nobody used that anyway. If people really want it, I can put the
articles submodule up somewhere.

Errors are not logged in the Hits model, because getting middleware
to work on error pages seemed like too much work.
([Here](http://stackoverflow.com/questions/12682291/middleware-not-executed-on-404)
is a start.) One can see look at errors in the Apache logs.
